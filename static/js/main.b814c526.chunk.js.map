{"version":3,"sources":["component/exchangeCard.jsx","home.jsx","App.js","reportWebVitals.js","index.js"],"names":["CURRENCY_SYMBOLS","EUR","USD","GBP","CURRENCIES","ExchangeCard","useState","currencyFrom","currencyTo","state","setState","input","setInput","balance","setBalance","exchangeRate","setExchangeRate","isError","setIsError","useEffect","fetch","then","res","json","response","rates","handleChange","event","value","target","name","handleInputChange","parseFloat","toFixed","onSubmit","preventDefault","className","onChange","filter","cc","map","currency","class","type","onClick","Button","disabled","Home","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b814c526.chunk.js","sourcesContent":["import { useState, React, useEffect } from \"react\";\r\nimport \"../styles/exchangeCard.css\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst CURRENCY_SYMBOLS = {\r\n  EUR: \"€\",\r\n  USD: \"$\",\r\n  GBP: \"£\",\r\n};\r\nconst CURRENCIES = [\"EUR\", \"USD\", \"GBP\"];\r\n\r\nconst ExchangeCard = () => {\r\n  const [state, setState] = useState({\r\n    currencyFrom: \"EUR\",\r\n    currencyTo: \"USD\",\r\n  });\r\n  const [input, setInput] = useState({\r\n    currencyFrom: 0,\r\n    currencyTo: 0,\r\n  });\r\n  const [balance, setBalance] = useState({\r\n    EUR: 3,\r\n    USD: 100,\r\n    GBP: 100,\r\n  });\r\n\r\n  const [exchangeRate, setExchangeRate] = useState(0);\r\n  const [isError, setIsError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setInput({\r\n      currencyFrom: 0,\r\n      currencyTo: 0,\r\n    });\r\n    fetch(\r\n      `http://api.exchangeratesapi.io/v1/latest?access_key=1abed3b7eb947d7509e3fa740dc7a42e&base=EUR`\r\n    ).then((res) =>\r\n      res.json().then((response) => {\r\n        if (state.currencyFrom === \"EUR\") {\r\n          setExchangeRate(response.rates[state.currencyTo]);\r\n        } else if (state.currencyFrom === \"USD\") {\r\n          if (state.currencyTo === \"EUR\") {\r\n            setExchangeRate(1 / response.rates[\"USD\"]);\r\n          } else if (state.currencyTo === \"GBP\") {\r\n            setExchangeRate(\r\n              (1 / response.rates[\"USD\"]) * response.rates[\"GBP\"]\r\n            );\r\n          }\r\n        } else if (state.currencyFrom === \"GBP\") {\r\n          if (state.currencyTo === \"EUR\") {\r\n            setExchangeRate(1 / response.rates[\"GBP\"]);\r\n          } else if (state.currencyTo === \"USD\") {\r\n            setExchangeRate(\r\n              (1 / response.rates[\"GBP\"]) * response.rates[\"USD\"]\r\n            );\r\n          }\r\n        }\r\n      })\r\n    );\r\n  }, [state]);\r\n\r\n  const hasError = (value) => {\r\n    if (value > balance[state.currencyFrom]) {\r\n      setIsError(true);\r\n    } else {\r\n      setIsError(false);\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const value = event.target.value;\r\n    setIsError(false);\r\n    setState({\r\n      ...state,\r\n      [event.target.name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    hasError(\r\n      event.target.name === \"currencyFrom\"\r\n        ? event.target.value\r\n        : input.currencyFrom\r\n    );\r\n    setInput({\r\n      ...input,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n    if (event.target.name === \"currencyFrom\") {\r\n      setInput((input) => ({\r\n        ...input,\r\n        currencyTo: parseFloat(event.target.value * exchangeRate).toFixed(2),\r\n      }));\r\n    } else {\r\n      setInput((input) => ({\r\n        ...input,\r\n        currencyFrom: parseFloat(event.target.value / exchangeRate).toFixed(2),\r\n      }));\r\n    }\r\n  };\r\n\r\n  const onExchange = () => {\r\n    setBalance({\r\n      ...balance,\r\n      [state.currencyFrom]: balance[state.currencyFrom] - input.currencyFrom,\r\n      [state.currencyTo]:\r\n        balance[state.currencyTo] + parseFloat(input.currencyTo),\r\n    });\r\n    setInput({\r\n      currencyFrom: 0,\r\n      currencyTo: 0,\r\n    });\r\n  };\r\n\r\n  const flipCurrency = () => {\r\n    setIsError(false);\r\n    setState({\r\n      currencyFrom: state.currencyTo,\r\n      currencyTo: state.currencyFrom,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"card\">\r\n          <div className=\"card-1\">\r\n            <div>\r\n              <select\r\n                name=\"currencyFrom\"\r\n                value={state.currencyFrom}\r\n                onChange={handleChange}\r\n              >\r\n                {CURRENCIES.filter((cc) => cc !== state.currencyTo).map(\r\n                  (currency) => (\r\n                    <option value={currency}>{currency}</option>\r\n                  )\r\n                )}\r\n              </select>\r\n              <br />\r\n\r\n              <div className=\"balance-label\">\r\n                Balance: {CURRENCY_SYMBOLS[state.currencyFrom]}{\" \"}\r\n                {balance[state.currencyFrom]}\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <div className=\"input-box\">\r\n                <span class=\"prefix\">-</span>\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"currencyFrom\"\r\n                  onChange={handleInputChange}\r\n                  value={input.currencyFrom}\r\n                />\r\n              </div>\r\n              {isError && <div className=\"error\">Exceeds balance</div>}\r\n            </div>\r\n            <div onClick={flipCurrency} className=\"flip\">\r\n              ↕\r\n            </div>\r\n            <div className=\"c-amount\">\r\n              <span>\r\n                {CURRENCY_SYMBOLS[state.currencyFrom]}1={\" \"}\r\n                {CURRENCY_SYMBOLS[state.currencyTo]}\r\n                {exchangeRate.toFixed(3)}\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"card-2\">\r\n            <div>\r\n              <select\r\n                name=\"currencyTo\"\r\n                value={state.currencyTo}\r\n                onChange={handleChange}\r\n              >\r\n                {CURRENCIES.filter((cc) => cc !== state.currencyFrom).map(\r\n                  (currency) => (\r\n                    <option value={currency}>{currency}</option>\r\n                  )\r\n                )}\r\n              </select>\r\n              <br />\r\n              <div className=\"balance-label\">\r\n                Balance: {CURRENCY_SYMBOLS[state.currencyTo]}\r\n                {balance[state.currencyTo]}\r\n              </div>\r\n            </div>\r\n            <div className=\"input-box\">\r\n              <span class=\"prefix\">+</span>\r\n              <input\r\n                type=\"number\"\r\n                onChange={handleInputChange}\r\n                name=\"currencyTo\"\r\n                value={input.currencyTo}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Button\r\n          disabled={isError}\r\n          onClick={onExchange}\r\n          className=\"btn-exchange\"\r\n          type=\"submit\"\r\n          value=\"Submit\"\r\n        >\r\n          Exchange\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExchangeCard;\r\n","import ExchangeCard from \"./component/exchangeCard\";\r\nimport \"./styles/home.css\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <>\r\n      <div className=\"main\">\r\n        <div className=\"main-menu\">Currency Exchange</div>\r\n        <div className=\"exchangeCard\">\r\n          <ExchangeCard />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import \"./App.css\";\nimport Home from \"./home\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// Netlify deploy test\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}